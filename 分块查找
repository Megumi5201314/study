例如，采用分块查找法在有序表11、12、18、28、39、56、69、89、96、122、135、146、156、256、298中查找关键字为96的元素
输入查找元素：
输出：所查找元素的位置是

思路：将待查的元素均匀地分成块，块间按大小排序，块内不排序，所以要建立一个块的最大（或最小）关键字表，称为索引表。

#include<stdio.h>
struct index//定义块的结构
{
	int key;//块的关键字
	int start;//块的初始值
	int end;//块的结束值
} index_table//定义结构体数组

int block_search(int key,int a[])
{
	int i,j;
	i=1;
	while(<=3&&ey>index_table[i].key)//确定在哪个块中
		i++;
	if(i>3)
		return 0;
	j=index_table[i].start;//j等于块范围的起始值
	while(j<=index_table[i].end&&a[j]!=key)//在确定的块内进行顺序查找
		j++;
	if(j>index_table[i].end)
		j=0;
	return j;
}
void main()
{
	int i,j=0;k,key,a[16];
	printf("请输入15个数:\n");
	for(i=1;i<16;i++)
		scanf("%d",&a[i]);//输入由大到小的15个数
	for(i=1;i<=3;i++)
	{
		index_table[i].start=j+1;//确定每个块范围的起始值
		j=j+1;
		index_table[i].end=j+4;//确定每个块范围的结束值
		j=j+4;
		index_table[i].key=a[j];//确定每个块范围中元素的最大值
	}
	printf("请输入你想查找的元素:\n");
	scanf("%d",&key);//输入要查询的数值
	k=block_search(key,a);//调用函数进行查找
	if(k!=0)
		printf("查找成功,其位置是:%d\n",k);//如果找打该数,则输出其位置信息
	else
		printf("查找失败");//若未找到，则输出提示信息

}
